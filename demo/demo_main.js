(()=>{"use strict";var __webpack_modules__={225:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(899);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/@tweenjs/tween.js/dist/tween.esm.js\nvar tween_esm = __webpack_require__(471);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\nclass Common {\n  static initCamera(scene, W, H) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, 400);\n    camera.position.set(0, 0, 100);\n    scene.add(camera);\n    return camera;\n  }\n\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n\n  static initHelper(scene, size = 30) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(size);\n    scene.add(axesHelper);\n  }\n\n  static initCube(scene, size = 5) {\n    const generateMaterial = color => {\n      return new three_module/* MeshBasicMaterial */.vBJ({\n        color,\n        opacity: 0.5,\n        transparent: true,\n        wireframe: true\n      });\n    };\n\n    const geometry = new three_module/* BoxGeometry */.DvJ(size, size, size);\n    const material = [generateMaterial(0x00ff00), generateMaterial(0xff0000), generateMaterial(0x0000ff), generateMaterial(0x00ff00), generateMaterial(0xff0000), generateMaterial(0x0000ff)];\n    const cube = new three_module/* Mesh */.Kj0(geometry, material);\n    scene.add(cube);\n    return cube;\n  }\n\n  static initRenderer(W, H, color = 0x000000, id = "webgl-canvas", antialias = true) {\n    const element = document.getElementById(id);\n    element.style.zIndex = 0;\n    element.style.position = "absolute";\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      canvas: element,\n      antialias: antialias\n    });\n    renderer.setClearColor(new three_module/* Color */.Ilk(color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n\n  static render(renderer, scene, camera) {\n    const rendering = () => {\n      renderer.render(scene, camera);\n      requestAnimationFrame(rendering);\n    };\n\n    rendering();\n  }\n\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/tween.js-ticker/esm/index.js + 1 modules\nvar esm = __webpack_require__(554);\n;// CONCATENATED MODULE: ./esm/SphericalControllerEvent.js\nclass SphericalControllerEvent {\n  constructor(type, targetParam) {\n    this.type = type;\n    this.targetParam = targetParam;\n  }\n\n}\nvar SphericalControllerEventType;\n\n(function (SphericalControllerEventType) {\n  SphericalControllerEventType["MOVED_CAMERA"] = "CameraEvent_TYPE_MOVED_CAMERA";\n  SphericalControllerEventType["MOVED_CAMERA_COMPLETE"] = "CameraEvent_TYPE_MOVED_CAMERA_COMPLETE";\n})(SphericalControllerEventType || (SphericalControllerEventType = {}));\n;// CONCATENATED MODULE: ./esm/TargetParam.js\n/**\n * [[SphericalController]]が管理する、どのオブジェクトを操作するかを指定する定数。\n *\n * ```typescript\n * controller.tweens.stopTween(TargetParam.CAMERA_TARGET);\n * // -> カメラターゲットメッシュの移動を停止する。\n * ```\n *\n * [[SphericalParamType]]定数と合わせて、どの対象を操作するかを指定する。\n */\nvar TargetParam;\n\n(function (TargetParam) {\n  TargetParam["CAMERA_TARGET"] = "cameraTarget";\n  TargetParam["CAMERA_SHIFT"] = "cameraShift";\n})(TargetParam || (TargetParam = {}));\n/**\n * Spherical型の座標のうち、どのパラメーターを操作するかを指定する定数。\n * 定数はTHREE.Spherical.*のいずれかのメンバーに対応する。\n *\n * ```typescript\n * controller.addPosition(SphericalParamType.R, 1.0);\n * // -> 半径に1.0加算される。\n * ```\n *\n * [[TargetParam]]定数と合わせて、どの対象を操作するかを指定する。\n */\n\n\nvar SphericalParamType;\n\n(function (SphericalParamType) {\n  SphericalParamType["R"] = "radius";\n  SphericalParamType["PHI"] = "phi";\n  SphericalParamType["THETA"] = "theta";\n})(SphericalParamType || (SphericalParamType = {}));\n;// CONCATENATED MODULE: ./esm/EasingOption.js\n/**\n * イージングオプション\n * move関数で一度限りのアニメーション設定するためのオプション。\n */\nclass EasingOption {\n  static init(option, controller, isLoop = false) {\n    if (option == null) {\n      option = new EasingOption();\n    }\n\n    option.duration = this.supplement(option.duration, controller.tweens.duration);\n    const defaultEase = isLoop ? controller.tweens.loopEasing : controller.tweens.easing;\n    option.easing = this.supplement(option.easing, defaultEase);\n    option.normalize = this.supplement(option.normalize, true);\n    return option;\n  }\n\n  static supplement(target, defaultValue) {\n    if (target == null) return defaultValue;\n    return target;\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/SphericalControllerUtil.js\n\nclass SphericalControllerUtil {\n  /**\n   * 任意の点までの回転アニメーションに必要になる\n   * 回転方向を算出する処理。\n   *\n   * @param from\n   * @param to\n   * @returns {number}    最短距離での目標となる回転角\n   */\n  static getTweenTheta(from, to) {\n    to = this.PI2ToPI(to);\n    let fromDif = this.PI2ToPI(from);\n    fromDif = this.PI2ToPI(to - fromDif);\n    return from + fromDif;\n  }\n  /**\n   * ラジアンを-Math.PI ~ Math.PIの範囲に正規化する。\n   * Math.PIもしくは-Math.PIを入力すると正負が反転する。\n   * @param {number} value\n   * @return {number}\n   * @constructor\n   */\n\n\n  static PI2ToPI(value) {\n    return Math.atan2(Math.sin(value), Math.cos(value));\n  }\n  /**\n   * loopアニメーションの初回振幅のdurationを算出する\n   * @param duration\n   * @param current\n   * @param max\n   * @param min\n   */\n\n\n  static getFirstDuration(duration, current, max, min) {\n    return Math.abs(duration * ((current - min) / (max - min)));\n  }\n\n  static generateCameraTarget() {\n    const geo = new three_module/* SphereGeometry */.xo$(1, 3, 3);\n    const mat = new three_module/* MeshBasicMaterial */.vBJ({\n      color: 0xff0000,\n      opacity: 0.0,\n      transparent: true\n    });\n    return new three_module/* Mesh */.Kj0(geo, mat);\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/CameraPositionLimiter.js\n\nclass CameraPositionLimiter {\n  constructor() {\n    this.phiMin = CameraPositionLimiter.EPS;\n    this.phiMax = Math.PI - CameraPositionLimiter.EPS;\n    this.thetaMin = null;\n    this.thetaMax = null;\n    this.rMax = Number.MAX_VALUE;\n    this.rMin = CameraPositionLimiter.EPS;\n  }\n\n  setLimit(type, max, min) {\n    switch (type) {\n      case SphericalParamType.PHI:\n        this.phiMax = max;\n        this.phiMin = min;\n        break;\n\n      case SphericalParamType.THETA:\n        this.thetaMax = max;\n        this.thetaMin = min;\n        break;\n\n      case SphericalParamType.R:\n        this.rMax = max;\n        this.rMin = min;\n        break;\n    }\n  }\n\n  clampWithType(type, val) {\n    switch (type) {\n      case SphericalParamType.PHI:\n        return CameraPositionLimiter.clamp(val, this.phiMax, this.phiMin);\n\n      case SphericalParamType.THETA:\n        return CameraPositionLimiter.clamp(val, this.thetaMax, this.thetaMin);\n\n      case SphericalParamType.R:\n        return CameraPositionLimiter.clamp(val, this.rMax, this.rMin);\n    }\n\n    return val;\n  }\n\n  clampPosition(type, pos) {\n    const val = pos[type];\n    pos[type] = this.clampWithType(type, val);\n  }\n\n  static clamp(value, max, min) {\n    if (min == null || max == null) return value;\n    value = Math.min(value, max);\n    value = Math.max(value, min);\n    return value;\n  }\n\n}\nCameraPositionLimiter.EPS = 0.000001;\n;// CONCATENATED MODULE: ./esm/SphericalControllerTween.js\n\n/**\n * [[SphericalController]]で使用するTweenインスタンスを管理するためのクラス。\n * Tweenを格納するMapと、新規Tweenに適用されるデフォルト設定で構成される。\n */\n\nclass SphericalControllerTween {\n  constructor() {\n    this.tweenMap = new Map();\n    this.duration = 1333;\n    this.easing = tween_esm/* Easing.Cubic.Out */.oY.Cubic.Out;\n    this.loopEasing = tween_esm/* Easing.Sinusoidal.InOut */.oY.Sinusoidal.InOut;\n  }\n  /**\n   * 指定されたTweenを停止する。\n   * @param type\n   */\n\n\n  stopTween(type) {\n    const tween = this.tweenMap.get(type);\n    if (!tween) return;\n    tween.stop();\n    this.tweenMap.delete(type);\n  }\n  /**\n   * 指定されたTweenを停止し、受け取ったTweenで上書きする。\n   * @param type\n   * @param tween\n   */\n\n\n  overrideTween(type, tween) {\n    this.stopTween(type);\n\n    if (tween) {\n      this.tweenMap.set(type, tween);\n    }\n  }\n  /**\n   * 現在アクティブなTweenが存在するか確認する。\n   */\n\n\n  isPlaying() {\n    let isPlaying = false;\n    this.tweenMap.forEach((value, key) => {\n      if (value === null || value === void 0 ? void 0 : value.isPlaying()) isPlaying = true;\n    });\n    return isPlaying;\n  }\n  /**\n   * 現在、指定されたkeyに対応するtweenが再生中か否かを判定する。\n   * @param key\n   */\n\n\n  isPlayingWithKey(key) {\n    var _a;\n\n    return (_a = this.tweenMap.get(key)) === null || _a === void 0 ? void 0 : _a.isPlaying();\n  }\n  /**\n   * 全てのtweenインスタンスを停止する。\n   */\n\n\n  stop() {\n    this.tweenMap.forEach((value, key) => {\n      if (key) this.stopTween(key);\n    });\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/CameraUpdateEvent.js\nclass CameraUpdateEvent {\n  constructor(type, cameraTarget, position, shift) {\n    this.type = type;\n    this.cameraTarget = cameraTarget;\n    this.position = position;\n    this.shift = shift;\n  }\n\n}\nvar CameraUpdateEventType;\n\n(function (CameraUpdateEventType) {\n  CameraUpdateEventType["UPDATE"] = "CameraEvent_TYPE_UPDATE";\n})(CameraUpdateEventType || (CameraUpdateEventType = {}));\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar raf_ticker_esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/CameraPositionUpdater.js\n\n\n\n\nclass CameraPositionUpdater {\n  constructor(parent, camera) {\n    this.isUpdate = false;\n    /**\n     * tweenによる更新フラグ処理\n     * イベントハンドラーで処理できるように関数とする。\n     * @param e\n     */\n\n    this.setNeedUpdate = e => {\n      this.isUpdate = true;\n      this.updateEvent = e;\n    };\n    /**\n     * カメラ位置および注視点の更新処理\n     */\n\n\n    this.updatePosition = () => {\n      if (!this.isUpdate) return;\n      this.isUpdate = false;\n      const e = this.updateEvent;\n      const cameraTargetPos = new three_module/* Vector3 */.Pa4();\n      const cameraPos = this._camera.position;\n      cameraPos.setFromSpherical(e.position);\n      cameraPos.add(e.cameraTarget.getWorldPosition(cameraTargetPos));\n\n      this._camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z);\n\n      this._camera.lookAt(e.cameraTarget.getWorldPosition(cameraTargetPos));\n\n      if (e.shift) {\n        const pos = this._camera.position.clone();\n\n        const move = new three_module/* Vector3 */.Pa4(e.shift.x, e.shift.y, e.shift.z);\n        move.applyEuler(this._camera.rotation.clone());\n        pos.add(move);\n\n        this._camera.position.set(pos.x, pos.y, pos.z);\n      }\n\n      this.dispatcher.dispatchEvent(new SphericalControllerEvent(SphericalControllerEventType.MOVED_CAMERA));\n    };\n\n    this.dispatcher = parent;\n    this._camera = camera;\n    this.dispatcher.addEventListener(CameraUpdateEventType.UPDATE, this.setNeedUpdate);\n    raf_ticker_esm/* RAFTicker.on */.Fz.on(raf_ticker_esm/* RAFTickerEventType.onBeforeTick */.M9.onBeforeTick, e => {\n      this.updatePosition();\n    });\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/SphericalController.js\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 球面座標系でカメラ位置をコントロールするクラス。\n *\n * カメラ位置はThetaおよびPhiで決定される。\n * 0, 0の場合北極上にカメラが位置する。\n * Phi : 0 ~ Math.PI (縦回転)\n * Theta : -Math.PI ~ Math.PI (横回転)\n * の範囲で可動する。\n *\n * 北極南極を通過すると緯度も反転するため、このクラスでは南北90度以上の移動には対応していない。また、極点上空では座標が一意の値にならないため、Phi 0もしくはPIには対応していない。\n */\n\nclass SphericalController extends three_module/* EventDispatcher */.pBf {\n  /**\n   * コンストラクタ\n   * @param camera\n   * @param target\n   */\n  constructor(camera, target) {\n    var _a;\n\n    var _b;\n\n    super();\n    this.pos = new three_module/* Spherical */.$V();\n    /**\n     * 画面のシフト\n     * 例えば(0,0,0)を指定すると_cameraTargetが必ず画面中央に表示される。\n     * 値を指定するとそのぶん_cameraTargetが中央からオフセットされる。\n     */\n\n    this.cameraShift = new three_module/* Vector3 */.Pa4();\n    this.tweens = new SphericalControllerTween();\n    this.limiter = new CameraPositionLimiter();\n\n    this.dispatchUpdateEvent = () => {\n      const e = new CameraUpdateEvent(CameraUpdateEventType.UPDATE, this._cameraTarget, this.pos, this.cameraShift);\n      this.dispatchEvent(e);\n    };\n\n    this._cameraTarget = target;\n    (_a = (_b = this._cameraTarget).material) !== null && _a !== void 0 ? _a : _b.material = new three_module/* MeshBasicMaterial */.vBJ({\n      color: 0xff0000,\n      opacity: 0.0,\n      transparent: true\n    });\n    this.cameraUpdater = new CameraPositionUpdater(this, camera);\n    esm/* TWEENTicker.start */.D.start();\n  }\n  /**\n   * カメラ位置の初期設定を行う\n   * @param pos\n   * @param targetPos\n   */\n\n\n  initCameraPosition(pos, targetPos) {\n    this.pos = pos;\n    const lmt = this.limiter;\n    lmt.clampPosition(SphericalParamType.PHI, this.pos);\n    lmt.clampPosition(SphericalParamType.THETA, this.pos);\n    lmt.clampPosition(SphericalParamType.R, this.pos);\n\n    if (targetPos) {\n      this._cameraTarget.position.set(targetPos.x, targetPos.y, targetPos.z);\n    }\n\n    this.dispatchUpdateEvent();\n  }\n  /**\n   * カメラの位置ずれ設定を行う。\n   * @param {Vector3} shift\n   */\n\n\n  initCameraShift(shift) {\n    this.cameraShift = shift.clone();\n    this.dispatchUpdateEvent();\n  }\n  /**\n   * カメラを任意の位置に移動する\n   * @param pos\n   * @param option\n   */\n\n\n  move(pos, option) {\n    option = EasingOption.init(option, this);\n    this.tweens.stop();\n    this.movePosition(SphericalParamType.R, pos.radius, option);\n    this.movePosition(SphericalParamType.PHI, pos.phi, option);\n    this.movePosition(SphericalParamType.THETA, pos.theta, option);\n  }\n  /**\n   * カメラターゲットの変更\n   * TODO 現状未実装。カメラターゲットが変更になった際の移動方法を調査、実装。\n   * @param _target\n   */\n\n\n  changeTarget(_target) {\n    this._cameraTarget = _target; // ここでダミーのカメラターゲットをシーン直下に生成\n    // 両ターゲット間をtweenさせる。\n    // 座標はworld座標に変換して統一。\n    // tweenが終了したらthis._cameraTargetを差し替え。\n  }\n  /**\n   * カメラ座標のうち、typeで指定された１つのパラメーターを移動する\n   * @param type\n   * @param value\n   * @param option\n   */\n\n\n  movePosition(type, value, option) {\n    option = EasingOption.init(option, this);\n\n    if (type === SphericalParamType.THETA && option.normalize) {\n      value = SphericalControllerUtil.getTweenTheta(this.pos.theta, value);\n    }\n\n    const to = this.limiter.clampWithType(type, value);\n    this.tweens.overrideTween(type, this.getTweenPosition(type, to, option));\n  }\n  /**\n   * movePosition関数用のtweenオブジェクトを生成する。\n   * @param targetParam\n   * @param to\n   * @param option\n   */\n\n\n  getTweenPosition(targetParam, to, option) {\n    const toObj = {};\n    toObj[targetParam] = to;\n    return new tween_esm/* Tween */.kX(this.pos).to(toObj, option.duration).easing(option.easing).onUpdate(this.dispatchUpdateEvent).onComplete(() => {\n      this.onCompleteCameraTween(targetParam);\n    }).start(option.startTime);\n  }\n  /**\n   * Tweenのcompleteイベントで呼び出される関数。\n   * MOVED_CAMERA_COMPLETEイベントを発行する。\n   * @param paramType\n   */\n\n\n  onCompleteCameraTween(paramType) {\n    this.dispatchEvent(new SphericalControllerEvent(SphericalControllerEventType.MOVED_CAMERA_COMPLETE, paramType));\n  }\n  /**\n   * カメラターゲットのみを移動する\n   * @param value 単位はラジアン角\n   * @param option\n   */\n\n\n  moveTarget(value, option) {\n    option = EasingOption.init(option, this);\n    const tween = new tween_esm/* Tween */.kX(this._cameraTarget.position).to({\n      x: value.x,\n      y: value.y,\n      z: value.z\n    }, option.duration).easing(option.easing).onUpdate(this.dispatchUpdateEvent).start(option.startTime);\n    this.tweens.overrideTween(TargetParam.CAMERA_TARGET, tween);\n  }\n\n  stopLoop(type) {\n    this.tweens.stopTween(type);\n  }\n  /**\n   * カメラ位置をループで移動させる。\n   * ゆらゆらと動かすための処理。\n   * @param type どのプロパティを操作するか。\n   * @param min\n   * @param max\n   * @param option このアニメーションに対する1回限りの設定を行う。\n   */\n\n\n  loop(type, min, max, option) {\n    if (type === SphericalParamType.THETA) {\n      this.pos.theta = SphericalControllerUtil.PI2ToPI(this.pos.theta);\n    }\n\n    option = EasingOption.init(option, this, true);\n    const toMin = this.limiter.clampWithType(type, min);\n    const toMax = this.limiter.clampWithType(type, max);\n    const toObjMax = {};\n    toObjMax[type] = toMax;\n    const toObjMin = {};\n    toObjMin[type] = toMin;\n\n    const loop = () => {\n      const startTime = option.startTime == null ? undefined : option.startTime + firstDuration;\n      const tween = new tween_esm/* Tween */.kX(this.pos).to(toObjMax, option.duration).yoyo(true).easing(option.easing).onUpdate(this.dispatchUpdateEvent).repeat(Infinity).start(startTime);\n      this.tweens.overrideTween(type, tween);\n    };\n\n    const firstDuration = SphericalControllerUtil.getFirstDuration(option.duration, this.pos[type], toMax, toMin);\n    const tween = new tween_esm/* Tween */.kX(this.pos).easing(option.easing).to(toObjMin, firstDuration).onUpdate(this.dispatchUpdateEvent).onComplete(loop).start(option.startTime);\n    this.tweens.overrideTween(type, tween);\n  }\n  /**\n   * カメラシフトを移動する\n   * @param value 移動先\n   * @param option\n   */\n\n\n  moveCameraShift(value, option) {\n    option = EasingOption.init(option, this);\n    const tween = new tween_esm/* Tween */.kX(this.cameraShift).easing(option.easing).to({\n      x: value.x,\n      y: value.y,\n      z: value.z\n    }, option.duration).onUpdate(this.dispatchUpdateEvent).start(option.startTime);\n    this.tweens.overrideTween(TargetParam.CAMERA_SHIFT, tween);\n  }\n  /**\n   * カメラターゲットの座標を加算する。\n   * 水平、垂直移動などに使用\n   * @param pos\n   * @param overrideTween\n   */\n\n\n  addTargetPosition(pos, overrideTween = false) {\n    if (!overrideTween && this.tweens.isPlaying()) return;\n\n    if (overrideTween && this.tweens.isPlaying()) {\n      this.tweens.stop();\n    }\n\n    this._cameraTarget.position.add(pos);\n\n    this.dispatchUpdateEvent();\n  }\n  /**\n   * カメラのSpherical座標に加算する。\n   * @param type\n   * @param value\n   * @param overrideTween 現在実行中のアニメーションを中断し、座標を上書きするか否か。\n   * @param addDuringTween アニメーション中の座標加算を許可するか。許可する場合、typeで指定した値がアニメーションしていなければ加算される。\n   */\n\n\n  addPosition(type, value, overrideTween = false, addDuringTween = false) {\n    if (!overrideTween) {\n      if (!addDuringTween && this.tweens.isPlaying()) {\n        return;\n      }\n\n      if (addDuringTween && this.tweens.isPlayingWithKey(type)) {\n        return;\n      }\n    }\n\n    if (overrideTween && this.tweens.isPlaying()) {\n      this.tweens.stop();\n    }\n\n    this.pos[type] += value;\n    this.limiter.clampPosition(type, this.pos);\n    this.dispatchUpdateEvent();\n  }\n  /**\n   * カメラ座標を他のSphericalオブジェクトに転写する。\n   * @param spherical\n   */\n\n\n  copySphericalPosition(spherical) {\n    return spherical.copy(this.pos);\n  }\n  /**\n   * カメラ座標を複製する。\n   */\n\n\n  cloneSphericalPosition() {\n    return this.pos.clone();\n  }\n\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo_main.js\n\n\n\n\n\nconst W = 1280;\nconst H = 800;\nlet renderer;\nlet scene;\nlet camera;\nconst R = 105;\n\nconst onDomContentsLoaded = () => {\n  // シーンを作成\n  scene = new three_module/* Scene */.xsS();\n  camera = Common.initCamera(scene, W, H);\n  renderer = Common.initRenderer(W, H);\n  Common.initLight(scene);\n  testPI2();\n  Common.initHelper(scene);\n  Common.initCube(scene);\n  const target = SphericalControllerUtil.generateCameraTarget();\n  scene.add(target);\n  const controller = initController(target, R);\n  checkPlaying(controller);\n  Common.render(renderer, scene, camera);\n  initGUI(controller);\n};\n\nconst testPI2 = () => {\n  console.log(SphericalControllerUtil.PI2ToPI(0) === 0);\n  console.log(SphericalControllerUtil.PI2ToPI(Math.PI) === Math.PI);\n  console.log(SphericalControllerUtil.PI2ToPI(-Math.PI) === -Math.PI);\n  console.log(SphericalControllerUtil.PI2ToPI(Math.PI * 2));\n  console.log(SphericalControllerUtil.PI2ToPI(Math.PI + 0.01) === -Math.PI + 0.01);\n  console.log(Math.abs(SphericalControllerUtil.PI2ToPI(Math.PI * 200 + 0.01) - 0.01) < 0.000001);\n};\n\nconst initController = (cameraTarget, R) => {\n  const cameraController = new SphericalController(camera, cameraTarget);\n  cameraController.initCameraPosition(new three_module/* Spherical */.$V(R, 0.0001, Math.PI * 2 * 12));\n  cameraController.initCameraShift(new three_module/* Vector3 */.Pa4(20, 0, 0));\n  cameraController.duration = 1666;\n  cameraController.addEventListener(SphericalControllerEventType.MOVED_CAMERA_COMPLETE, e => {\n    console.log("Complete : ", e);\n  });\n  return cameraController;\n};\n\nconst checkPlaying = controller => {\n  setInterval(() => {\n    console.log(controller.tweens.isPlaying());\n  }, 100);\n};\n\nconst initGUI = controller => {\n  const gui = new lil_gui_esm/* default */.ZP();\n  initRandomGUI(gui, controller);\n  initAddGUI(gui, controller);\n  initLoopGUI(gui, controller);\n};\n\nlet randomAnimationID;\n\nconst initRandomGUI = (gui, controller) => {\n  const prop = {\n    toggleRandomMove: () => {\n      if (randomAnimationID != null) {\n        stopRandomAnimation(controller);\n      } else {\n        startRandomAnimation(controller);\n      }\n    }\n  };\n  gui.add(prop, "toggleRandomMove");\n};\n\nconst stopRandomAnimation = controller => {\n  controller.tweens.stop();\n  clearInterval(randomAnimationID);\n  randomAnimationID = null;\n};\n\nconst startRandomAnimation = controller => {\n  const move = () => {\n    const to = new three_module/* Spherical */.$V(R, // Math.random() * 70 + 35,\n    Math.random() * Math.PI, Math.random() * Math.PI * 6 - Math.PI * 3);\n    controller.move(to, {\n      duration: 1500,\n      easing: tween_esm/* default.Easing.Cubic.Out */.ZP.Easing.Cubic.Out\n    });\n    console.log("Start : ", to);\n  };\n\n  move();\n  randomAnimationID = setInterval(move, 2000);\n};\n\nconst initAddGUI = (gui, controller) => {\n  const folder = gui.addFolder("add method");\n  folder.open();\n  const moveAngle = 0.1;\n  addPositionGUI(SphericalParamType.R, +5, folder, controller);\n  addPositionGUI(SphericalParamType.R, -5, folder, controller);\n  addPositionGUI(SphericalParamType.PHI, +moveAngle, folder, controller);\n  addPositionGUI(SphericalParamType.PHI, -moveAngle, folder, controller);\n  addPositionGUI(SphericalParamType.THETA, +moveAngle, folder, controller);\n  addPositionGUI(SphericalParamType.THETA, -moveAngle, folder, controller);\n};\n\nconst addPositionGUI = (type, value, folder, controller) => {\n  const prop = {};\n  let valString = value.toString();\n  if (value > 0) valString = "+" + valString;\n  const functionName = type + valString;\n\n  prop[functionName] = () => {\n    controller.addPosition(type, value);\n  };\n\n  folder.add(prop, functionName);\n};\n\nconst initLoopGUI = (gui, controller) => {\n  const folder = gui.addFolder("loop method");\n  folder.open();\n  addLoopGUI(SphericalParamType.R, 30, 150, folder, controller);\n  addLoopGUI(SphericalParamType.PHI, 0, Math.PI, folder, controller);\n  addLoopGUI(SphericalParamType.THETA, -Math.PI / 4, Math.PI / 4, folder, controller);\n};\n\nconst addLoopGUI = (type, min, max, folder, controller) => {\n  let flag = false;\n  const option = {\n    duration: 10 * 1000\n  };\n  const functionName = "loop_" + type;\n  const prop = {};\n\n  prop[functionName] = () => {\n    if (flag) {\n      controller.stopLoop(type);\n    } else {\n      controller.loop(type, min, max, option);\n    }\n\n    flag = !flag;\n  };\n\n  folder.add(prop, functionName);\n};\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\n\n\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///225\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var I=1/0;for(s=0;s<deferred.length;s++){for(var[F,U,B]=deferred[s],C=!0,g=0;g<F.length;g++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[g])))?F.splice(g--,1):(C=!1,B<I&&(I=B));if(C){deferred.splice(s--,1);var n=U();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var s=deferred.length;s>0&&deferred[s-1][2]>B;s--)deferred[s]=deferred[s-1];deferred[s]=[F,U,B]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={177:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,I,[C,g,n]=U,s=0;if(C.some((F=>0!==Q[F]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(n)var l=n(__webpack_require__)}for(F&&F(U);s<C.length;s++)I=C[s],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(l)},U=self.webpackChunk_masatomakino_threejs_spherical_controls=self.webpackChunk_masatomakino_threejs_spherical_controls||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(225)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();